//
// Generated file, do not edit! Created by nedtool 5.6 from outgoing.msg.
//

#ifndef __OUTGOING_M_H
#define __OUTGOING_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>outgoing.msg:19</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * message Outgoing
 * {
 *     \@customize(true);  // see the generated C++ header for more info
 *     int node_id;
 *     int green_light_time;
 *     int red_light_time;
 * }
 * </pre>
 *
 * Outgoing_Base is only useful if it gets subclassed, and Outgoing is derived from it.
 * The minimum code to be written for Outgoing is the following:
 *
 * <pre>
 * class Outgoing : public Outgoing_Base
 * {
 *   private:
 *     void copy(const Outgoing& other) { ... }

 *   public:
 *     Outgoing(const char *name=nullptr, short kind=0) : Outgoing_Base(name,kind) {}
 *     Outgoing(const Outgoing& other) : Outgoing_Base(other) {copy(other);}
 *     Outgoing& operator=(const Outgoing& other) {if (this==&other) return *this; Outgoing_Base::operator=(other); copy(other); return *this;}
 *     virtual Outgoing *dup() const override {return new Outgoing(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from Outgoing_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(Outgoing)
 * </pre>
 */
class Outgoing_Base : public ::omnetpp::cMessage
{
  protected:
    int node_id;
    int green_light_time;
    int red_light_time;

  private:
    void copy(const Outgoing_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Outgoing_Base&);
    // make constructors protected to avoid instantiation
    Outgoing_Base(const char *name=nullptr, short kind=0);
    Outgoing_Base(const Outgoing_Base& other);
    // make assignment operator protected to force the user override it
    Outgoing_Base& operator=(const Outgoing_Base& other);

  public:
    virtual ~Outgoing_Base();
    virtual Outgoing_Base *dup() const override {throw omnetpp::cRuntimeError("You forgot to manually add a dup() function to class Outgoing");}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getNode_id() const;
    virtual void setNode_id(int node_id);
    virtual int getGreen_light_time() const;
    virtual void setGreen_light_time(int green_light_time);
    virtual int getRed_light_time() const;
    virtual void setRed_light_time(int red_light_time);
};


#endif // ifndef __OUTGOING_M_H

